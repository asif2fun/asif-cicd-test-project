name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Frontend Linting and Testing
  frontend-lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies (frontend)
        run: npm install

      - name: Lint Frontend Code (ESLint)
        run: npm run lint  # Adjust script name if different

      - name: Test Frontend Code (Jest)
        run: npm test     # Adjust script name if different

  # Backend Build and Test (.NET)
  backend-build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use .NET 6.0
        uses: actions/setup-dotnet@v2
        with: dotnet-version: '6.0'  # Adjust .NET version if needed

      - name: Restore NuGet packages (backend)
        run: dotnet restore src/backend.sln  # Adjust path if needed

      - name: Build backend project
        run: dotnet build src/backend.sln  # Adjust path if needed

      - name: Test backend project (xUnit)
        # Assuming xUnit is used for testing. Adjust command/tool if different
        run: dotnet test src/backend.sln --no-build  # Adjust path if needed

# This workflow defines two separate jobs:
#   - frontend-lint-test: Handles frontend code linting (ESLint) and testing (Jest)
#   - backend-build-test: Handles backend project build and testing (assuming xUnit)

# Adjust script names, paths, and tools based on your specific project setup.
# You can further extend this workflow to include additional steps like code coverage analysis or deployment tasks.

